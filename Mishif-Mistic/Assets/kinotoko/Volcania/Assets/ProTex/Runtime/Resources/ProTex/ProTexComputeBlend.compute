#pragma kernel Darken
#pragma kernel Multiply
#pragma kernel ColorBurn
#pragma kernel LinearBurn

#pragma kernel Lighten
#pragma kernel Screen
#pragma kernel ColorDodge
#pragma kernel LinearDodge

#pragma kernel Overlay
#pragma kernel SoftLight
#pragma kernel HardLight
#pragma kernel VividLight
#pragma kernel LinearLight
#pragma kernel PinLight
#pragma kernel HardMix

#pragma kernel Difference
#pragma kernel Exclusion

uniform float4 size; 
uniform float4 brightnessContrast; 
uniform int4 alphaValue; // 0 = InputA, 1 = InputB, 2 = One, 3 = Zero, 4 = Operation 

StructuredBuffer<float4> input1;
StructuredBuffer<float4> input2;

RWStructuredBuffer<float4> output;

//----------------------------------------------------------------------------------------------------------------------
float4 SetBrightnessContrast(float4 color)
{
    float4 result = color;
    result.rgb = saturate((color.rgb - 0.5) * brightnessContrast.y + 0.5 + brightnessContrast.x);
    return result;
}

//----------------------------------------------------------------------------------------------------------------------
float4 GetPixel(StructuredBuffer<float4> buffer, uint2 pos)
{
    return buffer[pos.x + pos.y * size.x];
}

//----------------------------------------------------------------------------------------------------------------------
void SetPixel(uint2 pos, float4 color)
{
    output[pos.x + pos.y * size.x] = color;
}

//----------------------------------------------------------------------------------------------------------------------
float4 SetAlphaAndClamp(float4 value, float4 valueA, float4 valueB)
{
    if (alphaValue.x == 0)
    {
        value.w = valueA.w;
    }
    else if (alphaValue.x == 1)
    {
        value.w = valueB.w;
    }
    else if (alphaValue.x == 2)
    {
        value.w = 1;
    }
    else if (alphaValue.x == 3)
    {
        value.w = 0;
    }
 
    return clamp(value, 0.0, 1.0); 
}

//----------------------------------------------------------------------------------------------------------------------
[numthreads(8,8,1)]
void Darken(uint3 id : SV_DispatchThreadID)
{
    float4 valueA = GetPixel(input1, id.xy);
    float4 valueB = GetPixel(input2, id.xy);
    
    float4 result = min(valueA, valueB);
    
    result = SetBrightnessContrast(result);
    result = SetAlphaAndClamp(result, valueA, valueB);
	SetPixel(id.xy, result);
}

//----------------------------------------------------------------------------------------------------------------------
[numthreads(8,8,1)]
void Multiply(uint3 id : SV_DispatchThreadID)
{
    float4 valueA = GetPixel(input1, id.xy);
    float4 valueB = GetPixel(input2, id.xy);
    
    float4 result = valueA * valueB;
    
    result = SetBrightnessContrast(result);
    result = SetAlphaAndClamp(result, valueA, valueB);
	SetPixel(id.xy, result);
}

//----------------------------------------------------------------------------------------------------------------------
[numthreads(8,8,1)]
void ColorBurn(uint3 id : SV_DispatchThreadID)
{
    float4 valueA = GetPixel(input1, id.xy);
    float4 valueB = GetPixel(input2, id.xy);
    
    float4 result = 1.0 - (1.0 - valueB) / valueA;
    
    result = SetBrightnessContrast(result);
    result = SetAlphaAndClamp(result, valueA, valueB);
	SetPixel(id.xy, result);
}

//----------------------------------------------------------------------------------------------------------------------
[numthreads(8,8,1)]
void LinearBurn(uint3 id : SV_DispatchThreadID)
{
    float4 valueA = GetPixel(input1, id.xy);
    float4 valueB = GetPixel(input2, id.xy);
    
    float4 result = valueA + valueB - 1.0;
    
    result = SetBrightnessContrast(result);
    result = SetAlphaAndClamp(result, valueA, valueB);
	SetPixel(id.xy, result);
}

//----------------------------------------------------------------------------------------------------------------------
[numthreads(8,8,1)]
void Lighten(uint3 id : SV_DispatchThreadID)
{
    float4 valueA = GetPixel(input1, id.xy);
    float4 valueB = GetPixel(input2, id.xy);
    
    float4 result = max(valueA, valueB);
    
    result = SetBrightnessContrast(result);
    result = SetAlphaAndClamp(result, valueA, valueB);
	SetPixel(id.xy, result);
}

//----------------------------------------------------------------------------------------------------------------------
[numthreads(8,8,1)]
void Screen(uint3 id : SV_DispatchThreadID)
{
    float4 valueA = GetPixel(input1, id.xy);
    float4 valueB = GetPixel(input2, id.xy);
    
    float4 result = 1.0 - (1.0 - valueA) * (1.0 - valueB);
    
    result = SetBrightnessContrast(result);
    result = SetAlphaAndClamp(result, valueA, valueB);
	SetPixel(id.xy, result);
}

//----------------------------------------------------------------------------------------------------------------------
[numthreads(8,8,1)]
void ColorDodge(uint3 id : SV_DispatchThreadID)
{
    float4 valueA = GetPixel(input1, id.xy);
    float4 valueB = GetPixel(input2, id.xy);
    
    float4 result = valueB / (1.0 - valueA);
    
    result = SetBrightnessContrast(result);
    result = SetAlphaAndClamp(result, valueA, valueB);
	SetPixel(id.xy, result);
}

//----------------------------------------------------------------------------------------------------------------------
[numthreads(8,8,1)]
void LinearDodge(uint3 id : SV_DispatchThreadID)
{
    float4 valueA = GetPixel(input1, id.xy);
    float4 valueB = GetPixel(input2, id.xy);
    
    float4 result = valueA + valueB;
    
    result = SetBrightnessContrast(result);
    result = SetAlphaAndClamp(result, valueA, valueB);    
	SetPixel(id.xy, result);
}

//----------------------------------------------------------------------------------------------------------------------
[numthreads(8,8,1)]
void Overlay(uint3 id : SV_DispatchThreadID)
{
    float4 valueA = GetPixel(input1, id.xy);
    float4 valueB = GetPixel(input2, id.xy);
    
    float4 result1 = 2.0 * valueA * valueB;
    float4 result2 = 1.0 - 2.0 * (1.0 - valueA) * (1.0 - valueB);
    
    float4 result;
    result.x = (valueB.x <= 0.5) ? result1.x : result2.x; 
    result.y = (valueB.y <= 0.5) ? result1.y : result2.y; 
    result.z = (valueB.z <= 0.5) ? result1.z : result2.z; 
    result.w = (valueB.w <= 0.5) ? result1.w : result2.w; 
    
    result = SetBrightnessContrast(result);
    result = SetAlphaAndClamp(result, valueA, valueB);
	SetPixel(id.xy, result);
}

//----------------------------------------------------------------------------------------------------------------------
[numthreads(8,8,1)]
void SoftLight(uint3 id : SV_DispatchThreadID)
{
    float4 valueA = GetPixel(input1, id.xy);
    float4 valueB = GetPixel(input2, id.xy);
    
    float4 tmp = (2.0 * valueA - 1.0);
    float4 result1 = tmp * (valueB - valueB * valueB) + valueB;
    float4 result2 = tmp * (sqrt(valueB) - valueB) + valueB;
    
    float4 result;
    result.x = (valueA.x <= 0.5) ? result1.x : result2.x; 
    result.y = (valueA.y <= 0.5) ? result1.y : result2.y; 
    result.z = (valueA.z <= 0.5) ? result1.z : result2.z; 
    result.w = (valueA.w <= 0.5) ? result1.w : result2.w; 

    result = SetBrightnessContrast(result);
    result = SetAlphaAndClamp(result, valueA, valueB);
	SetPixel(id.xy, result);
}

//----------------------------------------------------------------------------------------------------------------------
[numthreads(8,8,1)]
void HardLight(uint3 id : SV_DispatchThreadID)
{
    float4 valueA = GetPixel(input1, id.xy);
    float4 valueB = GetPixel(input2, id.xy);
    
    float4 result1 = 2.0 * valueA * valueB;
    float4 result2 = 1.0 - 2.0 * (1.0 - valueA) * (1.0 - valueB);
    
    float4 result;
    result.x = (valueA.x <= 0.5) ? result1.x : result2.x; 
    result.y = (valueA.y <= 0.5) ? result1.y : result2.y; 
    result.z = (valueA.z <= 0.5) ? result1.z : result2.z; 
    result.w = (valueA.w <= 0.5) ? result1.w : result2.w; 

    result = SetBrightnessContrast(result);
    result = SetAlphaAndClamp(result, valueA, valueB);
	SetPixel(id.xy, result);
}

//----------------------------------------------------------------------------------------------------------------------
[numthreads(8,8,1)]
void VividLight(uint3 id : SV_DispatchThreadID)
{
    float4 valueA = GetPixel(input1, id.xy);
    float4 valueB = GetPixel(input2, id.xy);
    
    float4 result1 = 1.0 - (1.0 - valueB) / (2.0 * valueA);
    float4 result2 = valueB / (2.0 * (1.0 - valueA));
    
    float4 result;
    result.x = (valueA.x <= 0.5) ? result1.x : result2.x; 
    result.y = (valueA.y <= 0.5) ? result1.y : result2.y; 
    result.z = (valueA.z <= 0.5) ? result1.z : result2.z; 
    result.w = (valueA.w <= 0.5) ? result1.w : result2.w; 

    result = SetBrightnessContrast(result);
    result = SetAlphaAndClamp(result, valueA, valueB);    
	SetPixel(id.xy, result);
}

//----------------------------------------------------------------------------------------------------------------------
[numthreads(8,8,1)]
void LinearLight(uint3 id : SV_DispatchThreadID)
{
    float4 valueA = GetPixel(input1, id.xy);
    float4 valueB = GetPixel(input2, id.xy);
    
    float4 result = valueB + 2.0 * valueA - 1.0;
    
    result = SetBrightnessContrast(result);
    result = SetAlphaAndClamp(result, valueA, valueB);
	SetPixel(id.xy, result);
}

//----------------------------------------------------------------------------------------------------------------------
[numthreads(8,8,1)]
void PinLight(uint3 id : SV_DispatchThreadID)
{
    float4 valueA = GetPixel(input1, id.xy);
    float4 valueB = GetPixel(input2, id.xy);
    
    float4 result1 = 2.0 * valueA - 1.0;
    float4 result2 = 2.0 * valueA;
    
    float4 result;
    result.x = (valueB.x <= result1.x) ? result1.x : (valueB.x <= result2.x) ? valueB.x : result2.x; 
    result.y = (valueB.y <= result1.y) ? result1.y : (valueB.y <= result2.y) ? valueB.y : result2.y; 
    result.z = (valueB.z <= result1.z) ? result1.z : (valueB.z <= result2.z) ? valueB.z : result2.z; 
    result.w = (valueB.w <= result1.w) ? result1.w : (valueB.w <= result2.w) ? valueB.w : result2.w; 
   
    result = SetBrightnessContrast(result);
    result = SetAlphaAndClamp(result, valueA, valueB);    
	SetPixel(id.xy, result);
}

//----------------------------------------------------------------------------------------------------------------------
[numthreads(8,8,1)]
void HardMix(uint3 id : SV_DispatchThreadID)
{
    float4 valueA = GetPixel(input1, id.xy);
    float4 valueB = GetPixel(input2, id.xy);
    
    float4 result = (valueA < (1.0 - valueB)) ? 0.0f : 1.0f;

    result = SetBrightnessContrast(result);
    result = SetAlphaAndClamp(result, valueA, valueB);    
	SetPixel(id.xy, result);
}

//----------------------------------------------------------------------------------------------------------------------
[numthreads(8,8,1)]
void Difference(uint3 id : SV_DispatchThreadID)
{
    float4 valueA = GetPixel(input1, id.xy);
    float4 valueB = GetPixel(input2, id.xy);
    
    float4 result = abs(valueA - valueB);
    
    result = SetBrightnessContrast(result);
    result = SetAlphaAndClamp(result, valueA, valueB);    
	SetPixel(id.xy, result);
}

//----------------------------------------------------------------------------------------------------------------------
[numthreads(8,8,1)]
void Exclusion(uint3 id : SV_DispatchThreadID)
{
    float4 valueA = GetPixel(input1, id.xy);
    float4 valueB = GetPixel(input2, id.xy);
    
    float4 result = valueA + valueB - 2.0 * valueA * valueB;
    
    result = SetBrightnessContrast(result);
    result = SetAlphaAndClamp(result, valueA, valueB);    
	SetPixel(id.xy, result);
}
