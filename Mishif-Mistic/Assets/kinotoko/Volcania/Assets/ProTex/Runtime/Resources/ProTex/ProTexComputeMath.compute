#pragma kernel Add
#pragma kernel Subtract
#pragma kernel Multiply
#pragma kernel Divide
#pragma kernel Min
#pragma kernel Max
#pragma kernel Interpolate

uniform float4 size; 
uniform float4 brightnessContrast; 
uniform int4 alphaValue; // 0 = InputA, 1 = InputB, 2 = One, 3 = Zero, 4 = Operation 
uniform float4 offset;

StructuredBuffer<float4> input1;
StructuredBuffer<float4> input2;
StructuredBuffer<float4> input3;

RWStructuredBuffer<float4> output;

//----------------------------------------------------------------------------------------------------------------------
float4 SetBrightnessContrast(float4 color)
{
    float4 result = color;
    result.rgb = saturate((color.rgb - 0.5) * brightnessContrast.y + 0.5 + brightnessContrast.x);
    return result;
}

//----------------------------------------------------------------------------------------------------------------------
float4 GetPixel(StructuredBuffer<float4> buffer, uint2 pos)
{
    return buffer[pos.x + pos.y * size.x];
}

//----------------------------------------------------------------------------------------------------------------------
void SetPixel(uint2 pos, float4 color)
{
    output[pos.x + pos.y * size.x] = color;
}

//----------------------------------------------------------------------------------------------------------------------
float4 SetAlphaAndClamp(float4 value, float4 valueA, float4 valueB)
{
    if (alphaValue.x == 0)
    {
        value.w = valueA.w;
    }
    else if (alphaValue.x == 1)
    {
        value.w = valueB.w;
    }
    else if (alphaValue.x == 2)
    {
        value.w = 1;
    }
    else if (alphaValue.x == 3)
    {
        value.w = 0;
    }
 
    return saturate(value); 
}

//----------------------------------------------------------------------------------------------------------------------
[numthreads(8,8,1)]
void Add(uint3 id : SV_DispatchThreadID)
{
    float4 valueA = GetPixel(input1, id.xy);
    float4 valueB = GetPixel(input2, id.xy);
    
    float4 result = valueA + valueB;

    result = SetBrightnessContrast(result);    
    result = SetAlphaAndClamp(result, valueA, valueB);
	SetPixel(id.xy, result);
}

//----------------------------------------------------------------------------------------------------------------------
[numthreads(8,8,1)]
void Subtract(uint3 id : SV_DispatchThreadID)
{
    float4 valueA = GetPixel(input1, id.xy);
    float4 valueB = GetPixel(input2, id.xy);
    
    float4 result = valueA - valueB;
    
    result = SetBrightnessContrast(result);    
    result = SetAlphaAndClamp(result, valueA, valueB);
	SetPixel(id.xy, result);
}

//----------------------------------------------------------------------------------------------------------------------
[numthreads(8,8,1)]
void Multiply(uint3 id : SV_DispatchThreadID)
{
    float4 valueA = GetPixel(input1, id.xy);
    float4 valueB = GetPixel(input2, id.xy);
    
    float4 result = valueA * valueB;
    
    result = SetBrightnessContrast(result);    
    result = SetAlphaAndClamp(result, valueA, valueB);
	SetPixel(id.xy, result);
}

//----------------------------------------------------------------------------------------------------------------------
[numthreads(8,8,1)]
void Divide(uint3 id : SV_DispatchThreadID)
{
    float4 valueA = GetPixel(input1, id.xy);
    float4 valueB = GetPixel(input2, id.xy);
    
    float4 result = valueA / valueB;
    
    result = SetBrightnessContrast(result);    
    result = SetAlphaAndClamp(result, valueA, valueB);
	SetPixel(id.xy, result);
}

//----------------------------------------------------------------------------------------------------------------------
[numthreads(8,8,1)]
void Min(uint3 id : SV_DispatchThreadID)
{
    float4 valueA = GetPixel(input1, id.xy);
    float4 valueB = GetPixel(input2, id.xy);
    
    float4 result = min(valueA, valueB);
    
    result = SetBrightnessContrast(result);    
    result = SetAlphaAndClamp(result, valueA, valueB);
	SetPixel(id.xy, result);
}

//----------------------------------------------------------------------------------------------------------------------
[numthreads(8,8,1)]
void Max(uint3 id : SV_DispatchThreadID)
{
    float4 valueA = GetPixel(input1, id.xy);
    float4 valueB = GetPixel(input2, id.xy);
    
    float4 result = max(valueA, valueB);
    
    result = SetBrightnessContrast(result);    
    result = SetAlphaAndClamp(result, valueA, valueB);
	SetPixel(id.xy, result);
}

//----------------------------------------------------------------------------------------------------------------------
[numthreads(8,8,1)]
void Interpolate(uint3 id : SV_DispatchThreadID)
{
    float4 valueA = GetPixel(input1, id.xy);
    float4 valueB = GetPixel(input2, id.xy);
    float4 valueC = GetPixel(input3, id.xy);
    
    valueC = saturate(valueC + offset.xxxx);
    
    float4 result = lerp(valueA, valueB, valueC);
        
    result = SetBrightnessContrast(result);    
    result = SetAlphaAndClamp(result, valueA, valueB);
	SetPixel(id.xy, result);
}
